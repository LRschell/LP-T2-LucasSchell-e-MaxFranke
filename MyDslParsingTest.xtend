/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.mydsl.myDsl.Model

@ExtendWith(InjectionExtension)
@InjectWith(MyDslInjectorProvider)
class MyDslParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
	@Test
	def void sum() {
		val result = parseHelper.parse('''
			(+)
		''')
		//source: http://www.shido.info/lisp/scheme2_e.html
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	@Test
	def void sum2() {
		val result = parseHelper.parse('''
			(+ 1 2 3)
		''')
		Assertions.assertNotNull(result)
		//source: http://www.shido.info/lisp/scheme2_e.html
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	@Test
	def void sum3() {
		val result = parseHelper.parse('''
			(* (+ 1 39) (- 53 45))    
		''')
		Assertions.assertNotNull(result)
		//source: http://www.shido.info/lisp/scheme2_e.html
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	@Test
	def void Comment() {
		val result = parseHelper.parse('''
			;;KKKKKKHGFGHFGFHR43543FS432432dsds gfdgfd
		''')
		Assertions.assertNotNull(result)
		//source http://www.shido.info/lisp/scheme5_e.html
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void sum4() {
		val result = parseHelper.parse('''
			(+ (/ 1020 39) (* 45 2))  
		''')
		Assertions.assertNotNull(result)
		//source: http://www.shido.info/lisp/scheme2_e.html
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	@Test
	def void list() {
		val result = parseHelper.parse('''
			(list 1 2 3 5)
		''')
		Assertions.assertNotNull(result)
		//source //source: http://www.shido.info/lisp/scheme3_e.html
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	@Test
	def void trigF() {
		val result = parseHelper.parse('''
			(abs 2)
		''')
		Assertions.assertNotNull(result)
		//source: http://www.shido.info/lisp/idx_scm_e.html
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	@Test
	def void parentesis() {
		val result = parseHelper.parse('''
			(list)
		''')
		//source: http://www.shido.info/lisp/scheme3_e.html
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	@Test
	def void parentesis2() {
		val result = parseHelper.parse('''
			(list 1 2)
		''')
		Assertions.assertNotNull(result)
		//source: http://www.shido.info/lisp/scheme3_e.html
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	@Test
	def void lista() {
		val result = parseHelper.parse('''
			(list 1 2 3)
		''')
		Assertions.assertNotNull(result)
		//source: http://www.shido.info/lisp/scheme3_e.html
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	@Test
	def void listaelength() {
		val result = parseHelper.parse('''
			(length(list 1 2 3))
		''')
		Assertions.assertNotNull(result)
		//source: http://www.shido.info/lisp/scheme3_e.html
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void test1() {
		val result = parseHelper.parse('''
			(define (1+ x)
			  (+ x 1))
		''')
		Assertions.assertNotNull(result)
		//source http://www.shido.info/lisp/scheme4_e.html
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void test2() {
		val result = parseHelper.parse('''
			(define (1- x) (- x 1))
		''')
		Assertions.assertNotNull(result)
		//source http://www.shido.info/lisp/scheme4_e.html
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	@Test
	def void test3() {
		val result = parseHelper.parse('''
			(/(/ (- 1 2 3) (+ 2 2 5)))
		''')
		Assertions.assertNotNull(result)
		//source:https://repl.it/@bburnham/Hour-of-Code-Scheme
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	@Test
	def void test4() {
		val result = parseHelper.parse('''
			(list 1 2 3)
		''')
		Assertions.assertNotNull(result)
		//source:https://repl.it/@bburnham/Hour-of-Code-Scheme
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	@Test
	def void test5() {
		val result = parseHelper.parse('''
			(length(list 1 2 3))
		''')
		Assertions.assertNotNull(result)
		//source:https://repl.it/@bburnham/Hour-of-Code-Scheme
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	

}
